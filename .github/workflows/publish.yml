name: Publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      TEST_IMAGE_TAG: verify-${{ github.sha }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Prepare environment for verification
        run: |
          cat <<EOF > .env
POSTGRES_PASSWORD="$XKU5t&eYbdJ3b7E172RzGrDAFSSSgsC"
POSTGRES_USER=postgres
POSTGRES_DB=postgres
POSTGRES_HOST_PORT=55433
CONTAINER_NAME=postgres-combo
IMAGE_NAME=${REGISTRY}/${IMAGE_NAME}
IMAGE_TAG=${TEST_IMAGE_TAG}
EOF

      - name: Build verification image (amd64)
        run: |
          make build IMAGE_TAG=${TEST_IMAGE_TAG} BUILD_CMD="docker buildx build --load"

      - name: Run verification tests
        run: |
          make test IMAGE_TAG=${TEST_IMAGE_TAG}

      - name: Run security scan on verification image
        env:
          IMAGE_REFERENCE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TEST_IMAGE_TAG }}
        run: |
          make scan

      - name: Upload verification Trivy reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: verify-trivy-reports
          path: security-reports/
          if-no-files-found: ignore

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load version manifest
        run: |
          set -euo pipefail
          source build/versions.mk
          {
            echo "PGVECTOR_VERSION=$PGVECTOR_VERSION"
            echo "PGVECTOR_COMMIT=$PGVECTOR_COMMIT"
            echo "AGE_BRANCH=$AGE_BRANCH"
            echo "AGE_VERSION=$AGE_VERSION"
            echo "AGE_COMMIT=$AGE_COMMIT"
          } >> "$GITHUB_ENV"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            PGVECTOR_VERSION=${{ env.PGVECTOR_VERSION }}
            PGVECTOR_COMMIT=${{ env.PGVECTOR_COMMIT }}
            AGE_BRANCH=${{ env.AGE_BRANCH }}
            AGE_VERSION=${{ env.AGE_VERSION }}
            AGE_COMMIT=${{ env.AGE_COMMIT }}

      - name: Run Trivy vulnerability scan on published image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
