---
name: PR Validation

on:
  pull_request:
    branches: [main]
    paths:
      - 'build/**'
      - 'config/**'
      - 'scripts/**'
      - 'tests/**'
      - 'deploy/**'
      - 'tasks/**'
      - 'Dockerfile'
      - '.github/workflows/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version information
        id: versions
        run: |
          source build/versions.mk
          echo "pgvector_version=$PGVECTOR_VERSION" >> $GITHUB_OUTPUT
          echo "pgvector_commit=$PGVECTOR_COMMIT" >> $GITHUB_OUTPUT
          echo "age_version=$AGE_VERSION" >> $GITHUB_OUTPUT
          echo "age_branch=$AGE_BRANCH" >> $GITHUB_OUTPUT
          echo "age_commit=$AGE_COMMIT" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/Dockerfile
          push: false
          tags: |
            postgres-combo:test
          build-args: |
            PGVECTOR_VERSION=${{ steps.versions.outputs.pgvector_version }}
            PGVECTOR_COMMIT=${{ steps.versions.outputs.pgvector_commit }}
            AGE_BRANCH=${{ steps.versions.outputs.age_branch }}
            AGE_VERSION=${{ steps.versions.outputs.age_version }}
            AGE_COMMIT=${{ steps.versions.outputs.age_commit }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create environment file
        run: |
          cp .env.example .env
          echo "POSTGRES_PASSWORD=test_password_123" >> .env

      - name: Run test suite
        run: |
          # Override image name to use our test build
          export IMAGE_NAME=postgres-combo
          export IMAGE_TAG=test
          make test

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: postgres-combo:test
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: 'trivy-container-scan'
