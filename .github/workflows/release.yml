---
name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      update_versions:
        description: 'Update extension versions before release'
        required: false
        default: false
        type: boolean
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        run: |
          if [[ ! "${{ inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must follow semantic versioning (e.g., v1.0.0)"
            exit 1
          fi

      - name: Check if version already exists
        run: |
          if git tag -l | grep -q "^${{ inputs.version }}$"; then
            echo "Error: Version ${{ inputs.version }} already exists"
            exit 1
          fi

      - name: Update extension versions
        if: inputs.update_versions == true
        run: |
          echo "Updating extension versions..."
          make sync-versions

      - name: Extract version information
        id: versions
        run: |
          source build/versions.mk
          echo "pgvector_version=$PGVECTOR_VERSION" >> $GITHUB_OUTPUT
          echo "pgvector_commit=$PGVECTOR_COMMIT" >> $GITHUB_OUTPUT
          echo "age_version=$AGE_VERSION" >> $GITHUB_OUTPUT
          echo "age_branch=$AGE_BRANCH" >> $GITHUB_OUTPUT
          echo "age_commit=$AGE_COMMIT" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "version_number=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for release
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.versions.outputs.image_name }}
          flavor: |
            latest=false
          tags: |
            type=raw,value=${{ inputs.version }}
            type=semver,pattern={{version}},value=${{ inputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.version }}
            type=semver,pattern={{major}},value=${{ inputs.version }}
            type=raw,value=latest,enable=${{ !inputs.prerelease }}

      - name: Build and push release image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: build/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ inputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            PGVECTOR_VERSION=${{ steps.versions.outputs.pgvector_version }}
            PGVECTOR_COMMIT=${{ steps.versions.outputs.pgvector_commit }}
            AGE_BRANCH=${{ steps.versions.outputs.age_branch }}
            AGE_VERSION=${{ steps.versions.outputs.age_version }}
            AGE_COMMIT=${{ steps.versions.outputs.age_commit }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Run security scan on release image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.versions.outputs.image_name }}@${{ steps.build.outputs.digest }}
          format: sarif
          output: trivy-results.sarif

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: 'trivy-release-scan'

      - name: Generate changelog
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges -10)
          fi

          cat > release_notes.md << EOF
          ## Docker Image

          \`\`\`bash
          docker pull ${{ steps.versions.outputs.image_name }}:${{ inputs.version }}
          \`\`\`

          ## Extensions Included

          - **pgvector**: \`${{ steps.versions.outputs.pgvector_version }}\`
          - **Apache AGE**: \`${{ steps.versions.outputs.age_version }}\`

          ## Image Details

          - **Digest**: \`${{ steps.build.outputs.digest }}\`
          - **Platforms**: linux/amd64, linux/arm64
          - **Base Image**: postgres:16-bookworm

          ## Changes

          ${CHANGELOG}
          EOF

          echo "changelog_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ inputs.version }}" -m "Release ${{ inputs.version }}"
          git push origin "${{ inputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.version }}
          name: Release ${{ inputs.version }}
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          prerelease: ${{ inputs.prerelease }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest tag
        if: ${{ !inputs.prerelease }}
        run: |
          git tag -d latest || true
          git push origin :refs/tags/latest || true
          git tag latest
          git push origin latest
